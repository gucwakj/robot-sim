#include <robotsim.h>
#include <mobotsim.h>
#include <dlfcn.h>
#include <stdarg.h>
#include <array.h>

CMobot::CMobot() {
	void *fptr;
	if(CRobotSim::g_chrobotsim_dlhandle == NULL || CRobotSim::g_chrobotsim_dlcount == 0) {
		CRobotSim::g_chrobotsim_dlhandle = dlopen("librobotsim.dl", RTLD_LAZY);
		if(CRobotSim::g_chrobotsim_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_CMobot_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	CRobotSim::g_chrobotsim_dlcount++; // to increase count of instance
}

CMobot::~CMobot() {
	void *fptr;
	fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_dCMobot_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	CRobotSim::g_chrobotsim_dlcount--; // to decrease count of instance
	if(CRobotSim::g_chrobotsim_dlcount <= 0 && CRobotSim::g_chrobotsim_dlhandle != NULL) {
		if(dlclose(CRobotSim::g_chrobotsim_dlhandle)!=0)
			printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
	}
}

int CMobot::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobot::disconnect() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobot::driveTo(double angle1, double angle2, double angle3, double angle4) {
	void *fptr;
	int retval;

	fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_driveTo_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3, angle4);
	return retval;
}

int CMobot::driveToDirect(double angle1, double angle2, double angle3, double angle4) {
	void *fptr;
	int retval;

	fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_driveToDirect_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3, angle4);
	return retval;
}

int CMobot::driveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
	void *fptr;
	int retval;

	fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_driveToDirectNB_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3, angle4);
	return retval;
}

int CMobot::driveToNB(double angle1, double angle2, double angle3, double angle4) {
	void *fptr;
	int retval;

	fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_driveToNB_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3, angle4);
	return retval;
}

int CMobot::getJointAngle(robotJointId_t id, double &angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}

int CMobot::getJointAngleAverage(robotJointId_t id, double &angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointAngleAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		numReadings = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}

int CMobot::getJointAngles(double &angle1, double &angle2, double &angle3, double &angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4);
    return retval;
}

int CMobot::getJointAnglesAverage(double &angle1, double &angle2, double &angle3, double &angle4, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle4);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointAnglesAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		numReadings = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4, numReadings);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4);
    }
    va_end(ap);
    return retval;
}

int CMobot::getJointMaxSpeed(robotJointId_t id, double &speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CMobot::getJointSafetyAngle(double &angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}

int CMobot::getJointSafetyAngleTimeout(double &seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}

int CMobot::getJointSpeed(robotJointId_t id, double &speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CMobot::getJointSpeeds(double &speed1, double &speed2, double &speed3, double &speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3, &speed4);
    return retval;
}

int CMobot::getJointSpeedRatio(robotJointId_t id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}

int CMobot::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3, double &ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3, &ratio4);
    return retval;
}

int CMobot::getJointState(robotJointId_t id, int &state) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &state);
    return retval;
}

int CMobot::isConnected() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}

int CMobot::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CMobot::motionArch(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionArch_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArch, this, angle);
    return retval;
}

int CMobot::motionArchNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionArchNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArchNB, this, angle);
    return retval;
}

int CMobot::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistance, this, distance, radius);
    return retval;
}

int CMobot::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}

int CMobot::motionInchwormLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionInchwormLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeft, this, num);
    return retval;
}

int CMobot::motionInchwormLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionInchwormLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeftNB, this, num);
    return retval;
}

int CMobot::motionInchwormRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionInchwormRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRight, this, num);
    return retval;
}

int CMobot::motionInchwormRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionInchwormRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRightNB, this, num);
    return retval;
}

int CMobot::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CMobot::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}

int CMobot::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CMobot::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}

int CMobot::motionStand() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionStand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStand, this);
    return retval;
}

int CMobot::motionStandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionStandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStandNB, this);
    return retval;
}

int CMobot::motionTumbleLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTumbleLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeft, this, num);
    return retval;
}

int CMobot::motionTumbleLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTumbleLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeftNB, this, num);
    return retval;
}

int CMobot::motionTumbleRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTumbleRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRight, this, num);
    return retval;
}

int CMobot::motionTumbleRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTumbleRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRightNB, this, num);
    return retval;
}

int CMobot::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CMobot::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}

int CMobot::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CMobot::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}

int CMobot::motionUnstand() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionUnstand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstand, this);
    return retval;
}

int CMobot::motionUnstandNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionUnstandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstandNB, this);
    return retval;
}

int CMobot::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}

int CMobot::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CMobot::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CMobot::moveContinuousNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3, dir4);
    return retval;
}

int CMobot::moveContinuousTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}

int CMobot::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}

int CMobot::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}

int CMobot::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}

int CMobot::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}

int CMobot::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}

int CMobot::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}

int CMobot::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}

int CMobot::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}
int CMobot::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CMobot::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CMobot::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CMobot::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CMobot::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CMobot::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CMobot::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CMobot::recordAngle(int id, double time[:], double angle[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordAngleBegin(int id, double* &time, double* &angle, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordAngleBegin_chdl");
    if (fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if (va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}
int CMobot::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], double angle4[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, angle4, num, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, angle4, num, seconds);
    }
    return retval;
}

int CMobot::recordAnglesBegin(double* &time, double* &angle1, double* &angle2, double* &angle3, double* &angle4, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, &angle4, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, &angle4, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CMobot::recordDistanceBegin(int id, double* &time, double* &distance, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordDistanceEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CMobot::recordDistancesBegin(double* &time, double* &distance1, double* &distance2, double* &distance3, double* &distance4, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordDistancesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, &distance4, radius, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, &distance4, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordDistancesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordDistancesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CMobot::recordWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}

int CMobot::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CMobot::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobot::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CMobot::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}

int CMobot::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}

int CMobot::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}

int CMobot::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CMobot::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CMobot::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CMobot::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}

int CMobot::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CMobot::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3, ratio4);
    return retval;
}

int CMobot::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}

int CMobot::setMovementStateNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3, dir4);
    return retval;
}

int CMobot::setMovementStateTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}

int CMobot::setMovementStateTimeNB(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}

int CMobot::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}

int CMobot::stop() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CMobot::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CMobot::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CMobot::stopTwoJoints(int id1, int id2) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_stopTwoJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopTwoJoints, this, id1, id2);
    return retval;
}

int CMobot::stopThreeJoints(int id1, int id2, int id3) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_stopThreeJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopThreeJoints, this, id1, id2, id3);
    return retval;
}

int CMobot::turnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle);
    return retval;
}

int CMobot::turnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle);
    return retval;
}

int CMobot::turnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle);
    return retval;
}

int CMobot::turnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle);
    return retval;
}

CMobotGroup::CMobotGroup() {
	void *fptr;
	if(CRobotSim::g_chrobotsim_dlhandle == NULL || CRobotSim::g_chrobotsim_dlcount == 0) {
		CRobotSim::g_chrobotsim_dlhandle = dlopen("librobotsim.dl", RTLD_LAZY);
		if(CRobotSim::g_chrobotsim_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_CMobotGroup_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	CRobotSim::g_chrobotsim_dlcount++; // to increase count of instance
}

CMobotGroup::~CMobotGroup() {
	void *fptr;
	fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_dCMobotGroup_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	CRobotSim::g_chrobotsim_dlcount--; // to decrease count of instance
	if(CRobotSim::g_chrobotsim_dlcount <= 0 && CRobotSim::g_chrobotsim_dlhandle != NULL) {
		if(dlclose(CRobotSim::g_chrobotsim_dlhandle)!=0)
			printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
	}
}

int CMobotGroup::addRobot(CMobot &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}

int CMobotGroup::addRobots(array CMobot robots[], ...) {
    void *fptr;
    int retval;
    int numRobots;
    va_list ap;
    va_start(ap, robots);

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_addRobots_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		numRobots = va_arg(ap, int);
    } else {
		numRobots = (int)shape(robots);
    }
    dlrunfun(fptr, &retval, NULL, this, robots, numRobots);
    va_end(ap);
    return retval;
}

int CMobotGroup::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobotGroup::driveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_driveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirect, this, id, angle);
    return retval;
}

int CMobotGroup::driveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_driveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirectNB, this, id, angle);
    return retval;
}

int CMobotGroup::driveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::driveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::driveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::driveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CMobotGroup::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}

int CMobotGroup::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}

int CMobotGroup::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CMobotGroup::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}

int CMobotGroup::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CMobotGroup::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}

int CMobotGroup::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CMobotGroup::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}

int CMobotGroup::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CMobotGroup::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}

int CMobotGroup::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}

int CMobotGroup::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CMobotGroup::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CMobotGroup::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}

int CMobotGroup::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}

int CMobotGroup::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}

int CMobotGroup::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}

int CMobotGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CMobotGroup::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}

int CMobotGroup::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CMobotGroup::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CMobotGroup::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CMobotGroup::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}

int CMobotGroup::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CMobotGroup::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}

int CMobotGroup::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}

int CMobotGroup::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}

int CMobotGroup::setJointMovementStateTimeNB(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTimeNB, this, id, dir, seconds);
    return retval;
}

int CMobotGroup::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CMobotGroup::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CMobotGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CMobotGroup::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}

int CMobotGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CMobotGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3, ratio4);
    return retval;
}

int CMobotGroup::setMovementStateNB(int dir1, int dir2, int dir3, int dir4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3, dir4);
    return retval;
}

int CMobotGroup::setMovementStateTime(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}

int CMobotGroup::setMovementStateTimeNB(int dir1, int dir2, int dir3, int dir4, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, dir4, seconds);
    return retval;
}

int CMobotGroup::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}

int CMobotGroup::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopAllJoints, this);
    return retval;
}

int CMobotGroup::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CMobotGroup::turnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle);
    return retval;
}

int CMobotGroup::turnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle);
    return retval;
}

int CMobotGroup::turnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle);
    return retval;
}

int CMobotGroup::turnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMG_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle);
    return retval;
}
