#include <robotsim.h>
#include <mobotsim.h>
#include <dlfcn.h>

CRobotSim::CRobotSim() {
  void *fptr;
  if(CRobotSim::g_chrobotsim_dlhandle == NULL || CRobotSim::g_chrobotsim_dlcount == 0) {
    CRobotSim::g_chrobotsim_dlhandle = dlopen("librobotsim.dl", RTLD_LAZY);
    if(CRobotSim::g_chrobotsim_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CRobotSim_CRobotSim_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  dlrunfun(fptr, NULL, NULL);
  CRobotSim::g_chrobotsim_dlcount++; // to increase count of instance
}

CRobotSim::~CRobotSim() {
  void *fptr;
  fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CRobotSim_dCRobotSim_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  dlrunfun(fptr, NULL, NULL, this);
  CRobotSim::g_chrobotsim_dlcount--; // to decrease count of instance
  if(CRobotSim::g_chrobotsim_dlcount <= 0 && CRobotSim::g_chrobotsim_dlhandle != NULL) {
    if(dlclose(CRobotSim::g_chrobotsim_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CRobotSim::addRobot(CMobot &mobot) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CRobotSim_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, mobot);
    return retval;
}

int CRobotSim::setExitState(int state) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CRobotSim_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, state);
    return retval;
}

CMobot::CMobot() {
  void *fptr;
  if(CRobotSim::g_chrobotsim_dlhandle == NULL || CRobotSim::g_chrobotsim_dlcount == 0) {
    CRobotSim::g_chrobotsim_dlhandle = dlopen("librobotsim.dl", RTLD_LAZY);
    if(CRobotSim::g_chrobotsim_dlhandle == NULL) {
      printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
      return;
    }
  }
  fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_CMobot_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  dlrunfun(fptr, NULL, NULL);
  CRobotSim::g_chrobotsim_dlcount++; // to increase count of instance
}

CMobot::~CMobot() {
  void *fptr;
  fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_dCMobot_chdl");
  if(fptr == NULL) {
    printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
    return;
  }
  dlrunfun(fptr, NULL, NULL, this);
  CRobotSim::g_chrobotsim_dlcount--; // to decrease count of instance
  if(CRobotSim::g_chrobotsim_dlcount <= 0 && CRobotSim::g_chrobotsim_dlhandle != NULL) {
    if(dlclose(CRobotSim::g_chrobotsim_dlhandle)!=0)
      printf("Error: %s(): dlclose(): %s\n", __class_func__, dlerror());
  }
}

int CMobot::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, connect);
    return retval;
}

int CMobot::getJointAngle(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}

/*int CMobot::getJointAngleAbs(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointAngleAbs_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}*/

/*int CMobot::getJointAngles(double &angle1, double &angle2, double &angle3, double &angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4);
    return retval;
}*/

/*int CMobot::getJointAnglesAbs(double &angle1, double &angle2, double &angle3, double &angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointAnglesAbs_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4);
    return retval;
}*/

int CMobot::getJointSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CMobot::getJointSpeeds(double &speed1, double &speed2, double &speed3, double &speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3, &speed4);
    return retval;
}

int CMobot::motionArch(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionArch_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArch, this, angle);
    return retval;
}

int CMobot::motionInchwormLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionInchwormLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeft, this, num);
    return retval;
}

int CMobot::motionInchwormRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionInchwormRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRight, this, num);
    return retval;
}

int CMobot::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CMobot::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CMobot::motionStand() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionStand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStand, this);
    return retval;
}

int CMobot::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CMobot::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CMobot::motionTumbleLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTumbleLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeft, this, num);
    return retval;
}

int CMobot::motionTumbleRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionTumbleRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRight, this, num);
    return retval;
}

int CMobot::motionUnstand() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionUnstand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstand, this);
    return retval;
}

/*int CMobot::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}*/

int CMobot::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}
int CMobot::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}
int CMobot::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}
int CMobot::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CMobot::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CMobot::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CMobot::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

/*int CMobot::moveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}*/

int CMobot::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CMobot::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CMobot::recordAngle(int id, double time[:], double angle[:], int num, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    return retval;
}

int CMobot::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], double angle4[:], int num, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, angle4, num, seconds);
    return retval;
}

int CMobot::recordWait() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}

int CMobot::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CMobot::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}

int CMobot::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(CRobotSim::g_chrobotsim_dlhandle, "CMobot_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

