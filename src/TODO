TODO File for ODE Simulations

	iMobot positioned build
		be able to start a simulation with each motor at an arbitrary
		rotation about its axis.  When ODE builds a joint it analyzes the angle betwen
		the two bodies that it connects and sets that to zero angle.  Must create the
		body first in 'home' position and then within the build function manipulate the
		angles.  Might have to add check to see whether or not any body part is within
		the ground and then move it out artificially.  In addition to positioning the
		body parts, the check is needed for the robot to be positioned at any rotation
		about any axis.  About z-axis works fine now but rotating about the others
		causes the body to go into the ground.  With the check in place, the 3D rotation
		will work as well.

	Parallelize the code
		The gumstix aren't as fast as desktops and the simulations take a few
		seconds to run.  If not parallel, only one module can be doing work at a
		time leaving the others to sit idle.  When stringing multiple
		simulations together, this can add up.

	More realistic geometries for bodies
		Contact surfaces are based upon geoms for each body.  When initially
		building the modules, I went for simplicity.  However the large surfaces
		are all in contact and therefore the results are off.  Need to create an
		accurate set of aluminum pieces so that contacts mimic physical body.

	Move enum outside class
		Its what was done in CiMobot class.  Is there an advantage to this as
		opposed to having them inside.  Only one isntance of the class is called
		at a time so there wont be multiple copies.

	Move jntVel to constructor
		values within array are set within the build functions.  can be moved to
		constructor to be together with other values set for the simulation.

	Weight distribution
		Values are currently guessed.  Need a more accurate distribution of
		weights from a cad model.  Started work based on Graham's cad model within
		solidedge to get weights and moments of inertia for each body part
		including all connectors, etc.  KG doesn't have experience with cad
		modeling to get it done quickly.

	Max Joint Force
		Values are guessed as well.  From a working RecurDyn model, need to get
		the max force which can be applied by the motors for each joint.  These values
		are set within ODE to stall a motor when it cant overcome a body.

	More accurate completion check
		Currently the code will only check if all of the joints have completed
		all of their scheduled positions.  For cases like the camera stand, if
		the body falls over, can still get a 'success' flag because the bodies
		have completed their motions.  However the module is obviously not in
		the right position.

	More complete return data
		Current list of data returned after execution is limited.  Need a bit
		more especially when putting into optimization code.

	Function to get current state
		When cutting a sim short possibly to start again with new parameters,
		need to get current state of bodies and output to a file/arrayi

	Add pass by reference
		Some of the functions could be simplified with some pass by reference
		rather than pointers.  Not strictly necessary, but could it improve the
		execution time?
