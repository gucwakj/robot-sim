#include <robosim.h>
#include <mobot.h>
#include <dlfcn.h>
#include <stdarg.h>
#include <array.h>

CMobot::CMobot(void) {
	if (RoboSim::_dlhandle == NULL || RoboSim::_dlcount == 0) {
		RoboSim::_dlhandle = dlopen("librobosim.dl", RTLD_LAZY);
		if (RoboSim::_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	void *fptr = dlsym(RoboSim::_dlhandle, "CMobot_CMobot_chdl");
	if (fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	RoboSim::_dlcount++;
}

CMobot::~CMobot(void) {
	void *fptr = dlsym(RoboSim::_dlhandle, "CMobot_dCMobot_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	RoboSim::_dlcount--;
	if (RoboSim::_dlcount <= 0 && RoboSim::_dlhandle != NULL) {
		if (dlclose(RoboSim::_dlhandle) != 0)
			printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
	}
}

int CMobot::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}

int CMobot::connect(...) {
	void *fptr;
	int retval;
	va_list ap;
	char *name;
	va_start(ap, VA_NOARG);

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_connect_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}

	if (va_count(ap) == 1) {
		name = va_arg(ap, char *);
		dlrunfun(fptr, &retval, NULL, this, name);
	}
	else {
		dlrunfun(fptr, &retval, NULL, this, NULL);
	}

	va_end(ap);
	return retval;
}

int CMobot::delay(double milliseconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_delay_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, milliseconds);
    return retval;
}

int CMobot::delaySeconds(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_delaySeconds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, seconds);
    return retval;
}

int CMobot::disableRecordDataShift(void) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_disableRecordDataShift_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this);
	return retval;
}

int CMobot::disconnect(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobot::enableRecordDataShift(void) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_enableRecordDataShift_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this);
	return retval;
}

int CMobot::getDistance(double &distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &distance, radius);
    return retval;
}

int CMobot::getFormFactor(int &formFactor) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getFormFactor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &formFactor);
    return retval;
}

int CMobot::getJointAngle(int id, double & angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}

int CMobot::getJointAngleAverage(int id, double & angle, ...) {
	DEPRECATED("getJointAnglesAverage", "getJointAngles");
	getJointAngles(angle1, angle2, angle3);

	// success
	return 0;
}

int CMobot::getJointAngleInstant(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointAngleInstant_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}

int CMobot::getJointAngles(double &angle1, double &angle2, double &angle3, double &angle4...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle3);

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4);
    }
    va_end(ap);
    return retval;
}

int CMobot::getJointAnglesAverage(double &angle1, double &angle2, double &angle3, double &angle4, ...) {
	DEPRECATED("getJointAnglesAverage", "getJointAngles");
	getJointAngles(angle1, angle2, angle3, angle4);

	// success
	return 0;
}

int CMobot::getJointAnglesInstant(double &angle1, double &angle2, double &angle3, double &angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointAnglesInstant_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, &angle4);
    return retval;
}

int CMobot::getJointMaxSpeed(robotJointId_t id, double &speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CMobot::getJointSafetyAngle(double &angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}

int CMobot::getJointSafetyAngleTimeout(double &seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}

int CMobot::getJointSpeed(robotJointId_t id, double &speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CMobot::getJointSpeeds(double &speed1, double &speed2, double &speed3, double &speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3, &speed4);
    return retval;
}

int CMobot::getJointSpeedRatio(robotJointId_t id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}

int CMobot::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3, double &ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3, &ratio4);
    return retval;
}

int CMobot::getxy(double &x, double &y) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_getxy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y);
    return retval;
}

int CMobot::holdJoint(robotJointId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_holdJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJoint, this, id);
    return retval;
}

int CMobot::holdJoints(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_holdJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJoints, this);
    return retval;
}

int CMobot::holdJointsAtExit(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_holdJointsAtExit_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJointsAtExit, this);
    return retval;
}

int CMobot::isConnected(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}

int CMobot::isMoving(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CMobot::isNotMoving(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_isNotMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isNotMoving, this);
    return retval;
}

int CMobot::jumpJointTo(robotJointId_t id, double angle) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_jumpJointTo_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, jumpJointTo, this, id, angle);
	return retval;
}

int CMobot::jumpJointToNB(robotJointId_t id, double angle) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_jumpJointToNB_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, jumpJointToNB, this, id, angle);
	return retval;
}

int CMobot::jumpTo(double angle1, double angle2, double angle3, double angle4) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_jumpTo_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, jumpTo, this, angle1, angle2, angle3, angle4);
	return retval;
}

int CMobot::jumpToNB(double angle1, double angle2, double angle3, double angle4) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_jumpToNB_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, jumpToNB, this, angle1, angle2, angle3, angle4);
	return retval;
}

int CMobot::line(double x1, double y1, double z1, double x2, double y2, double z2, int linewidth, char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_line_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, line, this, x1, y1, z1, x2, y2, z2, linewidth, color);
    return retval;
}

int CMobot::motionArch(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionArch_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArch, this, angle);
    return retval;
}

int CMobot::motionArchNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionArchNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionArchNB, this, angle);
    return retval;
}

int CMobot::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistance, this, distance, radius);
    return retval;
}

int CMobot::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}

int CMobot::motionInchwormLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionInchwormLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeft, this, num);
    return retval;
}

int CMobot::motionInchwormLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionInchwormLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormLeftNB, this, num);
    return retval;
}

int CMobot::motionInchwormRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionInchwormRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRight, this, num);
    return retval;
}

int CMobot::motionInchwormRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionInchwormRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionInchwormRightNB, this, num);
    return retval;
}

int CMobot::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CMobot::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}

int CMobot::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CMobot::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}

int CMobot::motionStand(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionStand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStand, this);
    return retval;
}

int CMobot::motionStandNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionStandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStandNB, this);
    return retval;
}

int CMobot::motionTumbleLeft(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionTumbleLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeft, this, num);
    return retval;
}

int CMobot::motionTumbleLeftNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionTumbleLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleLeftNB, this, num);
    return retval;
}

int CMobot::motionTumbleRight(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionTumbleRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRight, this, num);
    return retval;
}

int CMobot::motionTumbleRightNB(int num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionTumbleRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTumbleRightNB, this, num);
    return retval;
}

int CMobot::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CMobot::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}

int CMobot::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CMobot::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}

int CMobot::motionUnstand(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionUnstand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstand, this);
    return retval;
}

int CMobot::motionUnstandNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionUnstandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstandNB, this);
    return retval;
}

int CMobot::motionWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}

int CMobot::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CMobot::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CMobot::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}

int CMobot::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}

int CMobot::moveForeverNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForeverNB, this);
    return retval;
}

int CMobot::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}

int CMobot::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}

int CMobot::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}

int CMobot::moveJointForeverNB(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointForeverNB, this, id);
    return retval;
}

int CMobot::moveJointTime(int id, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTime, this, id, seconds);
    return retval;
}

int CMobot::moveJointTimeNB(int id, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTimeNB, this, id, seconds);
    return retval;
}

int CMobot::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}

int CMobot::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CMobot::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CMobot::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CMobot::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CMobot::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CMobot::moveTime(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTime, this, seconds);
    return retval;
}

int CMobot::moveTimeNB(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTimeNB, this, seconds);
    return retval;
}

int CMobot::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobot::moveToZeroNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CMobot::moveWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CMobot::movexy(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_movexy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexy, this, x, y, radius, trackwidth);
    return retval;
}

int CMobot::movexyNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_movexyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyNB, this, x, y, radius, trackwidth);
    return retval;
}

int CMobot::movexyTo(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_movexyTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyTo, this, x, y, radius, trackwidth);
    return retval;
}

int CMobot::movexyToNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_movexyToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyToNB, this, x, y, radius, trackwidth);
    return retval;
}

int CMobot::movexyWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_movexyWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyWait, this);
    return retval;
}

int CMobot::point(double x, double y, double z, int pointsize, char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_point_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, point, this, x, y, z, pointsize, color);
    return retval;
}

int CMobot::recordAngle(int id, double time[:], double angle[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordAngleBegin(int id, double* &time, double* &angle, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordAngleBegin_chdl");
    if (fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if (va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CMobot::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], double angle4[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, angle4, num, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, angle4, num, seconds);
    }
    return retval;
}

int CMobot::recordAnglesBegin(double* &time, double* &angle1, double* &angle2, double* &angle3, double* &angle4, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, &angle4, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, &angle4, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CMobot::recordDistanceBegin(int id, double* &time, double* &distance, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordDistanceEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CMobot::recordDistanceOffset(double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordDistanceOffset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance);
    return retval;
}

int CMobot::recordDistancesBegin(double* &time, double* &distance1, double* &distance2, double* &distance3, double* &distance4, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordDistancesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, &distance4, radius, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, &distance4, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CMobot::recordDistancesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordDistancesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CMobot::recordWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}

int CMobot::recordxyBegin(double* &x, double* &y, double seconds, ...) {
	void *fptr;
	int retval;
	va_list ap;
	int shiftData = 1;
	va_start(ap, seconds);

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordxyBegin_chdl");
	if (fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}

	if (va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &x, &y, seconds, shiftData);
	}
	else {
		dlrunfun(fptr, &retval, NULL, this, &x, &y, seconds);
	}

	va_end(ap);
	return retval;
}

int CMobot::recordxyEnd(int &num) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CMobot_recordxyEnd_chdl");
	if (fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this, &num);
	return retval;
}

int CMobot::relaxJoint(robotJointId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_relaxJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, relaxJoint, this, id);
    return retval;
}

int CMobot::relaxJoints(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_relaxJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, relaxJoints, this);
    return retval;
}

int CMobot::reset(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CMobot::resetToZero(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobot::resetToZeroNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CMobot::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CMobot::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CMobot::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CMobot::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}

int CMobot::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CMobot::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3, ratio4);
    return retval;
}

int CMobot::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}

int CMobot::setSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_setSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setSpeed, this, speed, radius);
    return retval;
}

int CMobot::stop(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CMobot::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CMobot::stopTwoJoints(int id1, int id2) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_stopTwoJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopTwoJoints, this, id1, id2);
    return retval;
}

int CMobot::stopThreeJoints(int id1, int id2, int id3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_stopThreeJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopThreeJoints, this, id1, id2, id3);
    return retval;
}

int CMobot::systemTime(double &systemTime) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_systemTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &systemTime);
    return retval;
}

int CMobot::text(double x, double y, double z, char *text) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_text_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, z, text);
    return retval;
}

int CMobot::traceOff(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_traceOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobot::traceOn(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_traceOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobot::turnLeft(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, trackwidth);
    return retval;
}

int CMobot::turnLeftNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, trackwidth);
    return retval;
}

int CMobot::turnRight(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, trackwidth);
    return retval;
}

int CMobot::turnRightNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMobot_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, trackwidth);
    return retval;
}

CMobotGroup::CMobotGroup(void) {
	if (RoboSim::_dlhandle == NULL || RoboSim::_dlcount == 0) {
		RoboSim::_dlhandle = dlopen("librobosim.dl", RTLD_LAZY);
		if (RoboSim::_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	void *fptr = dlsym(RoboSim::_dlhandle, "CMG_CMobotGroup_chdl");
	if (fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	RoboSim::_dlcount++;
}

CMobotGroup::~CMobotGroup(void) {
	void *fptr = dlsym(RoboSim::_dlhandle, "CMG_dCMobotGroup_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	RoboSim::_dlcount--;
	if (RoboSim::_dlcount <= 0 && RoboSim::_dlhandle != NULL) {
		if (dlclose(RoboSim::_dlhandle) != 0)
			printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
	}
}

int CMobotGroup::addRobot(CMobot &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}

int CMobotGroup::addRobots(array CMobot robots[], ...) {
    void *fptr;
    int retval;
    int numRobots;
    va_list ap;
    va_start(ap, robots);

    fptr = dlsym(RoboSim::_dlhandle, "CMG_addRobots_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		numRobots = va_arg(ap, int);
    } else {
		numRobots = (int)shape(robots);
    }
    dlrunfun(fptr, &retval, NULL, this, robots, numRobots);
    va_end(ap);
    return retval;
}

int CMobotGroup::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}

int CMobotGroup::connect(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CMobotGroup::holdJoint(robotJointId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_holdJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJoint, this, id);
    return retval;
}

int CMobotGroup::holdJoints(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_holdJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJoints, this);
    return retval;
}

int CMobotGroup::holdJointsAtExit(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_holdJointsAtExit_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJointsAtExit, this);
    return retval;
}

int CMobotGroup::isMoving(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CMobotGroup::isNotMoving(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_isNotMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isNotMoving, this);
    return retval;
}

int CMobotGroup::jumpJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_jumpJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, jumpJointTo, this, id, angle);
    return retval;
}

int CMobotGroup::jumpJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_jumpJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, jumpJointToNB, this, id, angle);
    return retval;
}

int CMobotGroup::jumpTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_jumpTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, jumpTo, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::jumpToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_jumpToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, jumpToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}

int CMobotGroup::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}

int CMobotGroup::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CMobotGroup::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}

int CMobotGroup::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CMobotGroup::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}

int CMobotGroup::motionStand(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionStand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStand, this);
    return retval;
}

int CMobotGroup::motionStandNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionStandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionStandNB, this);
    return retval;
}

int CMobotGroup::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CMobotGroup::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}

int CMobotGroup::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CMobotGroup::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}

int CMobotGroup::motionUnstand(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionUnstand_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstand, this);
    return retval;
}

int CMobotGroup::motionUnstandNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionUnstandNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionUnstandNB, this);
    return retval;
}

int CMobotGroup::motionWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}

int CMobotGroup::move(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CMobotGroup::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CMobotGroup::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}

int CMobotGroup::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}

int CMobotGroup::moveForeverNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForeverNB, this);
    return retval;
}

int CMobotGroup::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}

int CMobotGroup::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}

int CMobotGroup::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointForeverNB(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointForeverNB, this, id);
    return retval;
}

int CMobotGroup::moveJointTime(int id, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTime, this, id, seconds);
    return retval;
}

int CMobotGroup::moveJointTimeNB(int id, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTimeNB, this, id, seconds);
    return retval;
}

int CMobotGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CMobotGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CMobotGroup::moveTime(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTime, this, seconds);
    return retval;
}

int CMobotGroup::moveTimeNB(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTimeNB, this, seconds);
    return retval;
}

int CMobotGroup::moveTo(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveToDirect(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveToNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveToDirectNB(double angle1, double angle2, double angle3, double angle4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3, angle4);
    return retval;
}

int CMobotGroup::moveToZero(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}

int CMobotGroup::moveToZeroNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CMobotGroup::moveWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CMobotGroup::relaxJoint(robotJointId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_relaxJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, relaxJoint, this, id);
    return retval;
}

int CMobotGroup::relaxJoints(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_relaxJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, relaxJoints, this);
    return retval;
}

int CMobotGroup::reset(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CMobotGroup::resetToZero(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}

int CMobotGroup::resetToZeroNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CMobotGroup::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CMobotGroup::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CMobotGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CMobotGroup::setJointSpeeds(double speed1, double speed2, double speed3, double speed4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3, speed4);
    return retval;
}

int CMobotGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CMobotGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3, ratio4);
    return retval;
}

int CMobotGroup::setSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_setSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setSpeed, this, speed, radius);
    return retval;
}

int CMobotGroup::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CMobotGroup::stopTwoJoints(int id1, int id2) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_stopTwoJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopTwoJoints, this, id1, id2);
    return retval;
}

int CMobotGroup::stopThreeJoints(int id1, int id2, int id3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_stopThreeJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopThreeJoints, this, id1, id2, id3);
    return retval;
}

int CMobotGroup::turnLeft(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, trackwidth);
    return retval;
}

int CMobotGroup::turnLeftNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, trackwidth);
    return retval;
}

int CMobotGroup::turnRight(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, trackwidth);
    return retval;
}

int CMobotGroup::turnRightNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CMG_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, trackwidth);
    return retval;
}
