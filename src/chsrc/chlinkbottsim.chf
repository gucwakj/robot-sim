#include <robosim.h>
#include <linkbot.h>
#include <dlfcn.h>
#include <stdarg.h>
#include <array.h>

CLinkbotT::CLinkbotT() {
	if (RoboSim::_dlhandle == NULL || RoboSim::_dlcount == 0) {
		RoboSim::_dlhandle = dlopen("librobosim.dl", RTLD_LAZY);
		if (RoboSim::_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	void *fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_CLinkbotT_chdl");
	if (fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	RoboSim::_dlcount++;
}

CLinkbotT::~CLinkbotT() {
	void *fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_dCLinkbotT_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	RoboSim::_dlcount--;
	if (RoboSim::_dlcount <= 0 && RoboSim::_dlhandle != NULL) {
		if (dlclose(RoboSim::_dlhandle) != 0)
			printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
	}
}

int CLinkbotT::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}

int CLinkbotT::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotT::delay(double milliseconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_delay_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, milliseconds);
    return retval;
}

int CLinkbotT::delaySeconds(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_delaySeconds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, seconds);
    return retval;
}

int CLinkbotT::disableRecordDataShift() {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_disableRecordDataShift_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this);
	return retval;
}

int CLinkbotT::disconnect() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, disconnect, this);
    return retval;
}

int CLinkbotT::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::enableRecordDataShift() {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_enableRecordDataShift_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this);
	return retval;
}

int CLinkbotT::getAccelerometerData(double &x, double &y, double &z) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getAccelerometerData_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y, &z);
    return retval;
}

int CLinkbotT::getBatteryVoltage(double &voltage) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getBatteryVoltage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &voltage);
    return retval;
}

int CLinkbotT::getColor(string_t &color) {
	int retval;
	char color1[25];

	retval = getColorName(color1);
	color = color1;
	return retval;
}

int CLinkbotT::getColorName(char color[]) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getColorName_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this, color);
	return retval;
}

int CLinkbotT::getColorRGB(int &r, int &g, int &b) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &r, &g, &b);
    return retval;
}

int CLinkbotT::getDistance(double &distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &distance, radius);
    return retval;
}

int CLinkbotT::getFormFactor(int & formFactor) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getFormFactor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &formFactor);
    return retval;
}

int CLinkbotT::getID() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getID_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotT::getJointAngle(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}

int CLinkbotT::getJointAngleAverage(int id, double & angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointAngleAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}

int CLinkbotT::getJointAngles(double &angle1, double &angle2, double &angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    return retval;
}

int CLinkbotT::getJointAnglesAverage(double &angle1, double &angle2, double &angle3, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle3);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointAnglesAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    }
    va_end(ap);
    return retval;
}

int CLinkbotT::getJointMaxSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CLinkbotT::getJointSafetyAngle(double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}

int CLinkbotT::getJointSafetyAngleTimeout(double & seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}

int CLinkbotT::getJointSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CLinkbotT::getJointSpeedRatio(int id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}

int CLinkbotT::getJointSpeeds(double &speed1, double &speed2, double &speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3);
    return retval;
}

int CLinkbotT::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3);
    return retval;
}

int CLinkbotT::getJointState(int id, int & state) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getJointState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &state);
    return retval;
}

int CLinkbotT::getxy(double &x, double &y) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_getxy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y);
    return retval;
}

int CLinkbotT::isConnected() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}

int CLinkbotT::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CLinkbotT::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistance, this, distance, radius);
    return retval;
}

int CLinkbotT::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}

int CLinkbotT::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CLinkbotT::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}

int CLinkbotT::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CLinkbotT::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}

int CLinkbotT::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CLinkbotT::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}

int CLinkbotT::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CLinkbotT::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}

int CLinkbotT::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}

int CLinkbotT::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CLinkbotT::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CLinkbotT::moveContinuousNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}

int CLinkbotT::moveContinuousTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotT::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}

int CLinkbotT::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}

int CLinkbotT::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}

int CLinkbotT::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}

int CLinkbotT::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}

int CLinkbotT::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}

int CLinkbotT::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}

int CLinkbotT::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}

int CLinkbotT::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CLinkbotT::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotT::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotT::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CLinkbotT::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CLinkbotT::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotT::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}

int CLinkbotT::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CLinkbotT::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CLinkbotT::movexy(double x, double y, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_movexy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexy, this, x, y, radius, tracklength);
    return retval;
}

int CLinkbotT::movexyNB(double x, double y, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_movexyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyNB, this, x, y, radius, tracklength);
    return retval;
}

int CLinkbotT::movexyTo(double x, double y, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_movexyTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyTo, this, x, y, radius, tracklength);
    return retval;
}

int CLinkbotT::movexyToNB(double x, double y, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_movexyToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyToNB, this, x, y, radius, tracklength);
    return retval;
}

int CLinkbotT::movexyWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_movexyWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyWait, this);
    return retval;
}

int CLinkbotT::point(double x, double y, double z, int pointsize, char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_point_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, point, this, x, y, z, pointsize, color);
    return retval;
}

int CLinkbotT::recordAngle(int id, double time[:], double angle[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotT::recordAngleBegin(int id, double* &time, double* &angle, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordAngleBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotT::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CLinkbotT::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds);
    }
    return retval;
}

int CLinkbotT::recordAnglesBegin(double* &time, double* &angle1, double* &angle2, double* &angle3, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotT::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CLinkbotT::recordDistanceBegin(int id, double* &time, double* &distance, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotT::recordDistanceEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CLinkbotT::recordDistanceOffset(double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordDistanceOffset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance);
    return retval;
}

int CLinkbotT::recordDistancesBegin(double* &time, double* &distance1, double* &distance2, double* &distance3, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordDistancesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, radius, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotT::recordDistancesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordDistancesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CLinkbotT::recordWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}

int CLinkbotT::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CLinkbotT::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}

int CLinkbotT::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CLinkbotT::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setBuzzerFrequency_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequency, this, frequency, time);
    return retval;
}

int CLinkbotT::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setBuzzerFrequencyOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOn, this, frequency);
    return retval;
}

int CLinkbotT::setBuzzerFrequencyOff() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setBuzzerFrequencyOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOff, this);
    return retval;
}

int CLinkbotT::setColor(char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setColor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setColor, this, color);
    return retval;
}

int CLinkbotT::setColorRGB(int r, int g, int b) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setColorRGB, this, r, g, b);
    return retval;
}

int CLinkbotT::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}

int CLinkbotT::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}

int CLinkbotT::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}

int CLinkbotT::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CLinkbotT::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CLinkbotT::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CLinkbotT::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CLinkbotT::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}

int CLinkbotT::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3);
    return retval;
}

int CLinkbotT::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}

int CLinkbotT::setMovementStateNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3);
    return retval;
}

int CLinkbotT::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotT::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotT::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}

int CLinkbotT::stop() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CLinkbotT::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CLinkbotT::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CLinkbotT::systemTime(double &systemTime) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_systemTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &systemTime);
    return retval;
}

int CLinkbotT::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, tracklength);
    return retval;
}

int CLinkbotT::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, tracklength);
    return retval;
}

int CLinkbotT::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, tracklength);
    return retval;
}

int CLinkbotT::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotT_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, tracklength);
    return retval;
}

CLinkbotTGroup::CLinkbotTGroup() {
	if (RoboSim::_dlhandle == NULL || RoboSim::_dlcount == 0) {
		RoboSim::_dlhandle = dlopen("librobosim.dl", RTLD_LAZY);
		if (RoboSim::_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	void *fptr = dlsym(RoboSim::_dlhandle, "CLTG_CLinkbotTGroup_chdl");
	if (fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	RoboSim::_dlcount++;
}

CLinkbotTGroup::~CLinkbotTGroup() {
	void *fptr = dlsym(RoboSim::_dlhandle, "CLTG_dCLinkbotTGroup_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	RoboSim::_dlcount--;
	if (RoboSim::_dlcount <= 0 && RoboSim::_dlhandle != NULL) {
		if (dlclose(RoboSim::_dlhandle) != 0)
			printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
	}
}

int CLinkbotTGroup::addRobot(CLinkbotT &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}

int CLinkbotTGroup::addRobots(array CLinkbotT robots[], ...) {
    void *fptr;
    int retval;
    int numRobots;
    va_list ap;
    va_start(ap, robots);

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_addRobots_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		numRobots = va_arg(ap, int);
    } else {
		numRobots = (int)shape(robots);
    }
    dlrunfun(fptr, &retval, NULL, this, robots, numRobots);
    va_end(ap);
    return retval;
}

int CLinkbotTGroup::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}

int CLinkbotTGroup::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotTGroup::driveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_driveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotTGroup::driveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_driveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotTGroup::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CLinkbotTGroup::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}

int CLinkbotTGroup::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}

int CLinkbotTGroup::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CLinkbotTGroup::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}

int CLinkbotTGroup::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CLinkbotTGroup::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}

int CLinkbotTGroup::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CLinkbotTGroup::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}

int CLinkbotTGroup::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CLinkbotTGroup::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}

int CLinkbotTGroup::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}

int CLinkbotTGroup::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CLinkbotTGroup::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CLinkbotTGroup::moveContinuousNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}

int CLinkbotTGroup::moveContinuousTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotTGroup::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}

int CLinkbotTGroup::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}

int CLinkbotTGroup::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}

int CLinkbotTGroup::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}

int CLinkbotTGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CLinkbotTGroup::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotTGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CLinkbotTGroup::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotTGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CLinkbotTGroup::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotTGroup::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}

int CLinkbotTGroup::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CLinkbotTGroup::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CLinkbotTGroup::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CLinkbotTGroup::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}

int CLinkbotTGroup::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CLinkbotTGroup::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}

int CLinkbotTGroup::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}

int CLinkbotTGroup::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}

int CLinkbotTGroup::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CLinkbotTGroup::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CLinkbotTGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CLinkbotTGroup::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}

int CLinkbotTGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CLinkbotTGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3);
    return retval;
}

int CLinkbotTGroup::setMovementStateNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3);
    return retval;
}

int CLinkbotTGroup::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotTGroup::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotTGroup::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}

int CLinkbotTGroup::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopAllJoints, this);
    return retval;
}

int CLinkbotTGroup::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CLinkbotTGroup::turnLeft(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, tracklength);
    return retval;
}

int CLinkbotTGroup::turnLeftNB(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, tracklength);
    return retval;
}

int CLinkbotTGroup::turnRight(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, tracklength);
    return retval;
}

int CLinkbotTGroup::turnRightNB(double angle, double radius, double tracklength) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLTG_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, tracklength);
    return retval;
}
