#include <robosim.h>
#include <linkbot.h>
#include <dlfcn.h>
#include <stdarg.h>
#include <array.h>

CLinkbotL::CLinkbotL(void) {
	if (RoboSim::_dlhandle == NULL || RoboSim::_dlcount == 0) {
		RoboSim::_dlhandle = dlopen("librobosim.dl", RTLD_LAZY);
		if (RoboSim::_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	void *fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_CLinkbotL_chdl");
	if (fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	RoboSim::_dlcount++;
}

CLinkbotL::~CLinkbotL(void) {
	void *fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_dCLinkbotL_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	RoboSim::_dlcount--;
	if (RoboSim::_dlcount <= 0 && RoboSim::_dlhandle != NULL) {
		if (dlclose(RoboSim::_dlhandle) != 0)
			printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
	}
}

int CLinkbotL::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}

int CLinkbotL::closeGripper(void) {
	double gripperAngleOld = 0;
	double gripperAngleNew = 0;
	int retval;

	retval = getJointAngle(JOINT1, gripperAngleNew);

	while ( fabs(gripperAngleNew - gripperAngleOld) > 0.1 ) {
		gripperAngleOld = gripperAngleNew;
		retval = retval || getJointAngle(JOINT1, gripperAngleNew);
		retval = retval || moveNB(8, NaN, 8);
		delaySeconds(1);
		retval = retval || getJointAngle(JOINT1, gripperAngleNew);
	}

	retval = retval || moveNB(8, NaN, 8);
	delaySeconds(1);
	retval = retval || moveForeverNB();

	return retval;
}

int CLinkbotL::connect(...) {
	void *fptr;
	int retval;
	va_list ap;
	char *name;
	va_start(ap, VA_NOARG);

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_connect_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}

	if (va_count(ap) == 1) {
		name = va_arg(ap, char *);
		dlrunfun(fptr, &retval, NULL, this, name);
	}
	else {
		dlrunfun(fptr, &retval, NULL, this, NULL);
	}

	va_end(ap);
	return retval;
}

int CLinkbotL::delay(double milliseconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_delay_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, milliseconds);
    return retval;
}

int CLinkbotL::delaySeconds(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_delaySeconds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, seconds);
    return retval;
}

int CLinkbotL::disableRecordDataShift(void) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_disableRecordDataShift_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this);
	return retval;
}

int CLinkbotL::disconnect(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, disconnect, this);
    return retval;
}

int CLinkbotL::driveJointTo(robotJointId_t id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_driveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointTo, this, id, angle);
    return retval;
}

int CLinkbotL::driveJointToNB(robotJointId_t id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_driveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToNB, this, id, angle);
    return retval;
}

int CLinkbotL::driveJointToDirect(robotJointId_t id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_driveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotL::driveJointToDirectNB(robotJointId_t id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_driveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotL::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::enableRecordDataShift(void) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_enableRecordDataShift_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this);
	return retval;
}

int CLinkbotL::getAccelerometerData(double &x, double &y, double &z) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getAccelerometerData_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y, &z);
    return retval;
}

int CLinkbotL::getBatteryVoltage(double &voltage) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getBatteryVoltage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &voltage);
    return retval;
}

int CLinkbotL::getColor(string_t &color) {
	DEPRECATED("getColor", "getLEDColor");
	getLEDColor(color);

	// success
	return 0;
}

int CLinkbotL::getColorRGB(int &r, int &g, int &b) {
	DEPRECATED("getColorRGB", "getLEDColorRGB");
	getLEDColorRGB(r, g, b);

	// success
	return 0;
}

int CLinkbotL::getLEDColor(string_t &color) {
	int retval;
	char color1[25];

	retval = getLEDColorName(color1);
	color = color1;
	return retval;
}

int CLinkbotL::getLEDColorName(char color[]) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getLEDColorName_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this, color);
	return retval;
}

int CLinkbotL::getLEDColorRGB(int &r, int &g, int &b) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getLEDColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &r, &g, &b);
    return retval;
}

int CLinkbotL::getDistance(double &distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &distance, radius);
    return retval;
}

int CLinkbotL::getFormFactor(int & formFactor) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getFormFactor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &formFactor);
    return retval;
}

int CLinkbotL::getID(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getID_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotL::getJointAngle(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}

int CLinkbotL::getJointAngleAverage(int id, double & angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointAngleAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}

int CLinkbotL::getJointAngles(double &angle1, double &angle2, double &angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    return retval;
}

int CLinkbotL::getJointAnglesAverage(double &angle1, double &angle2, double &angle3, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle3);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointAnglesAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    }
    va_end(ap);
    return retval;
}

int CLinkbotL::getJointMaxSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CLinkbotL::getJointSafetyAngle(double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}

int CLinkbotL::getJointSafetyAngleTimeout(double & seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}

int CLinkbotL::getJointSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CLinkbotL::getJointSpeedRatio(int id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}

int CLinkbotL::getJointSpeeds(double &speed1, double &speed2, double &speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3);
    return retval;
}

int CLinkbotL::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3);
    return retval;
}

int CLinkbotL::getxy(double &x, double &y) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_getxy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y);
    return retval;
}

int CLinkbotL::holdJoint(robotJointId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_holdJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJoint, this, id);
    return retval;
}

int CLinkbotL::holdJoints(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_holdJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJoints, this);
    return retval;
}

int CLinkbotL::holdJointsAtExit(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_holdJointsAtExit_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJointsAtExit, this);
    return retval;
}

int CLinkbotL::isConnected(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}

int CLinkbotL::isMoving(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CLinkbotL::isNotMoving(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_isNotMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isNotMoving, this);
    return retval;
}

int CLinkbotL::line(double x1, double y1, double z1, double x2, double y2, double z2, int linewidth, char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_line_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, line, this, x1, y1, z1, x2, y2, z2, linewidth, color);
    return retval;
}

int CLinkbotL::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CLinkbotL::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CLinkbotL::moveForeverNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForeverNB, this);
    return retval;
}

int CLinkbotL::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}

int CLinkbotL::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}

int CLinkbotL::moveJointForeverNB(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointForeverNB, this, id);
    return retval;
}

int CLinkbotL::moveJointTime(int id, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTime, this, id, seconds);
    return retval;
}

int CLinkbotL::moveJointTimeNB(int id, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTimeNB, this, id, seconds);
    return retval;
}

int CLinkbotL::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CLinkbotL::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CLinkbotL::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotL::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotL::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CLinkbotL::moveTime(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTime, this, seconds);
    return retval;
}

int CLinkbotL::moveTimeNB(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTimeNB, this, seconds);
    return retval;
}

int CLinkbotL::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotL::moveToZero(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}

int CLinkbotL::moveToZeroNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CLinkbotL::moveWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CLinkbotL::movexy(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_movexy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexy, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotL::movexyNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_movexyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyNB, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotL::movexyTo(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_movexyTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyTo, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotL::movexyToNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_movexyToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyToNB, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotL::movexyWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_movexyWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyWait, this);
    return retval;
}

int CLinkbotL::openGripper(double angle) {
	return moveJointTo(JOINT1, -angle);
}

int CLinkbotL::openGripperNB(double angle) {
	return moveJointTo(JOINT1, -angle);
}

int CLinkbotL::point(double x, double y, double z, int pointsize, char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_point_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, point, this, x, y, z, pointsize, color);
    return retval;
}

int CLinkbotL::recordAngle(int id, double time[:], double angle[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotL::recordAngleBegin(int id, double* &time, double* &angle, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordAngleBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotL::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CLinkbotL::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds);
    }
    return retval;
}

int CLinkbotL::recordAnglesBegin(double* &time, double* &angle1, double* &angle2, double* &angle3, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotL::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CLinkbotL::recordDistanceBegin(int id, double* &time, double* &distance, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotL::recordDistanceEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CLinkbotL::recordDistanceOffset(double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordDistanceOffset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance);
    return retval;
}

int CLinkbotL::recordDistancesBegin(double* &time, double* &distance1, double* &distance2, double* &distance3, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordDistancesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, radius, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotL::recordDistancesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordDistancesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CLinkbotL::recordWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}

int CLinkbotL::recordxyBegin(double* &x, double* &y, double seconds, ...) {
	void *fptr;
	int retval;
	va_list ap;
	int shiftData = 1;
	va_start(ap, seconds);

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordxyBegin_chdl");
	if (fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}

	if (va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &x, &y, seconds, shiftData);
	}
	else {
		dlrunfun(fptr, &retval, NULL, this, &x, &y, seconds);
	}

	va_end(ap);
	return retval;
}

int CLinkbotL::recordxyEnd(int &num) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_recordxyEnd_chdl");
	if (fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this, &num);
	return retval;
}

int CLinkbotL::relaxJoint(robotJointId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_relaxJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, relaxJoint, this, id);
    return retval;
}

int CLinkbotL::relaxJoints(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_relaxJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, relaxJoints, this);
    return retval;
}

int CLinkbotL::reset(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CLinkbotL::resetToZero(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}

int CLinkbotL::resetToZeroNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CLinkbotL::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setBuzzerFrequency_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequency, this, frequency, time);
    return retval;
}

int CLinkbotL::setBuzzerFrequencyOff(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setBuzzerFrequencyOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOff, this);
    return retval;
}

int CLinkbotL::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setBuzzerFrequencyOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOn, this, frequency);
    return retval;
}

int CLinkbotL::setColor(char *color) {
	DEPRECATED("setColor", "setLEDColor");
	setLEDColor(color);

	// success
	return 0;
}

int CLinkbotL::setColorRGB(int r, int g, int b) {
	DEPRECATED("setColorRGB", "setLEDColorRGB");
	setLEDColorRGB(r, g, b);

	// success
	return 0;
}

int CLinkbotL::setExitState(int exitState) {
	DEPRECATED("setExitState", "holdJointsAtExit");
	holdJointsAtExit();

	// success
	return 0;
}

int CLinkbotL::setLEDColor(char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setLEDColor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setLEDColor, this, color);
    return retval;
}

int CLinkbotL::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setLEDColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setLEDColorRGB, this, r, g, b);
    return retval;
}

int CLinkbotL::setJointMovementStateNB(int id, int dir) {
	DEPRECATED("setJointMovementStateNB", "moveJointForeverNB");

	double speed;
	// move correctly
	switch (dir) {
		case ROBOT_HOLD:
			holdJoint(id);
			break;
		case ROBOT_NEUTRAL:
			relaxJoint(id);
			break;
		case ROBOT_FORWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, abs(speed));
			moveJointForeverNB(id);
			break;
		case ROBOT_BACKWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, -abs(speed));
			moveJointForeverNB(id);
			break;
	}

	// success
	return 0;
}

int CLinkbotL::setJointMovementStateTime(int id, int dir, double seconds) {
	DEPRECATED("setJointMovementStateTime", "moveJointTime");

	double speed;
	// move correctly
	switch (dir) {
		case ROBOT_HOLD:
			holdJoint(id);
			delay(seconds);
			break;
		case ROBOT_NEUTRAL:
			relaxJoint(id);
			delay(seconds);
			break;
		case ROBOT_FORWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, abs(speed));
			moveJointTime(id, seconds);
			break;
		case ROBOT_BACKWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, -abs(speed));
			moveJointTime(id, seconds);
			break;
	}

	// success
	return 0;
}

int CLinkbotL::setJointMovementStateTimeNB(int id, int dir, double seconds) {
	DEPRECATED("setJointMovementStateTimeNB", "moveJointTimeNB");

	double speed;
	// move correctly
	switch (dir) {
		case ROBOT_HOLD:
			holdJoint(id);
			break;
		case ROBOT_NEUTRAL:
			relaxJoint(id);
			break;
		case ROBOT_FORWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, abs(speed));
			moveJointTimeNB(id, seconds);
			break;
		case ROBOT_BACKWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, -abs(speed));
			moveJointTimeNB(id, seconds);
			break;
	}

	// success
	return 0;
}

int CLinkbotL::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CLinkbotL::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CLinkbotL::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CLinkbotL::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CLinkbotL::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}

int CLinkbotL::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3);
    return retval;
}

int CLinkbotL::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}

int CLinkbotL::setMovementStateNB(int dir1, int dir2, int dir3) {
	DEPRECATED("setMovementStateNB", "moveForeverNB");

	setJointMovementStateNB(0, dir1);
	setJointMovementStateNB(1, dir2);
	setJointMovementStateNB(2, dir3);

	// success
	return 0;
}

int CLinkbotL::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
	DEPRECATED("setMovementStateTime", "moveTime");

	setJointMovementStateTimeNB(0, dir1, seconds);
	setJointMovementStateTimeNB(1, dir2, seconds);
	setJointMovementStateTime(2, dir3, seconds);

	// success
	return 0;
}

int CLinkbotL::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
	DEPRECATED("setMovementStateTimeNB", "moveTimeNB");

	setJointMovementStateTimeNB(0, dir1, seconds);
	setJointMovementStateTimeNB(1, dir2, seconds);
	setJointMovementStateTimeNB(2, dir3, seconds);

	// success
	return 0;
}

int CLinkbotL::setSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_setSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setSpeed, this, speed, radius);
    return retval;
}

int CLinkbotL::stop(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CLinkbotL::stopAllJoints(void) {
	DEPRECATED("stopAllJoints", "relaxJoints");
	relaxJoints();

	// success
	return 0;
}

int CLinkbotL::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CLinkbotL::stopTwoJoints(int id1, int id2) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_stopTwoJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopTwoJoints, this, id1, id2);
    return retval;
}

int CLinkbotL::stopThreeJoints(int id1, int id2, int id3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_stopThreeJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopThreeJoints, this, id1, id2, id3);
    return retval;
}

int CLinkbotL::systemTime(double &systemTime) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_systemTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &systemTime);
    return retval;
}

int CLinkbotL::text(double x, double y, double z, char *text) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_text_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, z, text);
    return retval;
}

int CLinkbotL::traceOff(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_traceOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotL::traceOn(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_traceOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotL::turnLeft(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotL::turnLeftNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotL::turnRight(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotL::turnRightNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotL_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, trackwidth);
    return retval;
}

CLinkbotLGroup::CLinkbotLGroup(void) {
	if (RoboSim::_dlhandle == NULL || RoboSim::_dlcount == 0) {
		RoboSim::_dlhandle = dlopen("librobosim.dl", RTLD_LAZY);
		if (RoboSim::_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	void *fptr = dlsym(RoboSim::_dlhandle, "CLLG_CLinkbotLGroup_chdl");
	if (fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	RoboSim::_dlcount++;
}

CLinkbotLGroup::~CLinkbotLGroup(void) {
	void *fptr = dlsym(RoboSim::_dlhandle, "CLLG_dCLinkbotLGroup_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	RoboSim::_dlcount--;
	if (RoboSim::_dlcount <= 0 && RoboSim::_dlhandle != NULL) {
		if (dlclose(RoboSim::_dlhandle) != 0)
			printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
	}
}

int CLinkbotLGroup::addRobot(CLinkbotL &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}

int CLinkbotLGroup::addRobots(array CLinkbotL robots[], ...) {
    void *fptr;
    int retval;
    int numRobots;
    va_list ap;
    va_start(ap, robots);

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_addRobots_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		numRobots = va_arg(ap, int);
    } else {
		numRobots = (int)shape(robots);
    }
    dlrunfun(fptr, &retval, NULL, this, robots, numRobots);
    va_end(ap);
    return retval;
}

int CLinkbotLGroup::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}

int CLinkbotLGroup::connect(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotLGroup::driveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_driveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointTo, this, id, angle);
    return retval;
}

int CLinkbotLGroup::driveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_driveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToNB, this, id, angle);
    return retval;
}

int CLinkbotLGroup::driveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_driveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotLGroup::driveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_driveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotLGroup::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::holdJoint(robotJointId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_holdJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJoint, this, id);
    return retval;
}

int CLinkbotLGroup::holdJoints(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_holdJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJoints, this);
    return retval;
}

int CLinkbotLGroup::holdJointsAtExit(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_holdJointsAtExit_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, holdJointsAtExit, this);
    return retval;
}

int CLinkbotLGroup::isMoving(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CLinkbotLGroup::isNotMoving(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_isNotMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isNotMoving, this);
    return retval;
}

int CLinkbotLGroup::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CLinkbotLGroup::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CLinkbotLGroup::moveForeverNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForeverNB, this);
    return retval;
}

int CLinkbotLGroup::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}

int CLinkbotLGroup::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}

int CLinkbotLGroup::moveJointForeverNB(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointForeverNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointForeverNB, this, id);
    return retval;
}

int CLinkbotLGroup::moveJointTime(int id, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTime, this, id, seconds);
    return retval;
}

int CLinkbotLGroup::moveJointTimeNB(int id, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTimeNB, this, id, seconds);
    return retval;
}

int CLinkbotLGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CLinkbotLGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CLinkbotLGroup::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotLGroup::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotLGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CLinkbotLGroup::moveTime(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTime, this, seconds);
    return retval;
}

int CLinkbotLGroup::moveTimeNB(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTimeNB, this, seconds);
    return retval;
}

int CLinkbotLGroup::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotLGroup::moveToZero(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}

int CLinkbotLGroup::moveToZeroNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CLinkbotLGroup::moveWait(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CLinkbotLGroup::relaxJoint(robotJointId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_relaxJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, relaxJoint, this, id);
    return retval;
}

int CLinkbotLGroup::relaxJoints(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_relaxJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, relaxJoints, this);
    return retval;
}

int CLinkbotLGroup::reset(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CLinkbotLGroup::resetToZero(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}

int CLinkbotLGroup::resetToZeroNB(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CLinkbotLGroup::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setBuzzerFrequency_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequency, this, frequency, time);
    return retval;
}

int CLinkbotLGroup::setBuzzerFrequencyOff(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setBuzzerFrequencyOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOff, this);
    return retval;
}

int CLinkbotLGroup::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setBuzzerFrequencyOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOn, this, frequency);
    return retval;
}

int CLinkbotLGroup::setExitState(int exitState) {
	DEPRECATED("setExitState", "holdJointsAtExit");
	holdJointsAtExit();

	// success
	return 0;
}

int CLinkbotLGroup::setLEDColor(char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setLEDColor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setLEDColor, this, color);
    return retval;
}

int CLinkbotLGroup::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setLEDColor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setLEDColorRGB, this, r, g, b);
    return retval;
}

int CLinkbotLGroup::setJointMovementStateNB(int id, int dir) {
	DEPRECATED("setJointMovementStateNB", "moveJointForeverNB");

	double speed;
	// move correctly
	switch (dir) {
		case ROBOT_HOLD:
			holdJoint(id);
			break;
		case ROBOT_NEUTRAL:
			relaxJoint(id);
			break;
		case ROBOT_FORWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, abs(speed));
			moveJointForeverNB(id);
			break;
		case ROBOT_BACKWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, -abs(speed));
			moveJointForeverNB(id);
			break;
	}

	// success
	return 0;
}

int CLinkbotLGroup::setJointMovementStateTime(int id, int dir, double seconds) {
	DEPRECATED("setJointMovementStateTime", "moveJointTime");

	double speed;
	// move correctly
	switch (dir) {
		case ROBOT_HOLD:
			holdJoint(id);
			delay(seconds);
			break;
		case ROBOT_NEUTRAL:
			relaxJoint(id);
			delay(seconds);
			break;
		case ROBOT_FORWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, abs(speed));
			moveJointTime(id, seconds);
			break;
		case ROBOT_BACKWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, -abs(speed));
			moveJointTime(id, seconds);
			break;
	}

	// success
	return 0;
}

int CLinkbotLGroup::setJointMovementStateTimeNB(int id, int dir, double seconds) {
	DEPRECATED("setJointMovementStateTimeNB", "moveJointTimeNB");

	double speed;
	// move correctly
	switch (dir) {
		case ROBOT_HOLD:
			holdJoint(id);
			break;
		case ROBOT_NEUTRAL:
			relaxJoint(id);
			break;
		case ROBOT_FORWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, abs(speed));
			moveJointTimeNB(id, seconds);
			break;
		case ROBOT_BACKWARD:
			this->getJointSpeed(id, speed);
			this->setJointSpeed(id, -abs(speed));
			moveJointTimeNB(id, seconds);
			break;
	}

	// success
	return 0;
}

int CLinkbotLGroup::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CLinkbotLGroup::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CLinkbotLGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CLinkbotLGroup::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}

int CLinkbotLGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CLinkbotLGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3);
    return retval;
}

int CLinkbotLGroup::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}

int CLinkbotLGroup::setMovementStateNB(int dir1, int dir2, int dir3) {
	DEPRECATED("setMovementStateNB", "moveForeverNB");

	setJointMovementStateNB(0, dir1);
	setJointMovementStateNB(1, dir2);
	setJointMovementStateNB(2, dir3);

	// success
	return 0;
}

int CLinkbotLGroup::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
	DEPRECATED("setMovementStateTime", "moveTime");

	setJointMovementStateTimeNB(0, dir1, seconds);
	setJointMovementStateTimeNB(1, dir2, seconds);
	setJointMovementStateTime(2, dir3, seconds);

	// success
	return 0;
}

int CLinkbotLGroup::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
	DEPRECATED("setMovementStateTimeNB", "moveTimeNB");

	setJointMovementStateTimeNB(0, dir1, seconds);
	setJointMovementStateTimeNB(1, dir2, seconds);
	setJointMovementStateTimeNB(2, dir3, seconds);

	// success
	return 0;
}

int CLinkbotLGroup::setSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_setSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setSpeed, this, speed, radius);
    return retval;
}

int CLinkbotLGroup::stop(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CLinkbotLGroup::stopAllJoints(void) {
	DEPRECATED("stopAllJoints", "relaxJoints");
	relaxJoints();

	// success
	return 0;
}

int CLinkbotLGroup::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CLinkbotLGroup::stopTwoJoints(int id1, int id2) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_stopTwoJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopTwoJoints, this, id1, id2);
    return retval;
}

int CLinkbotLGroup::stopThreeJoints(int id1, int id2, int id3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_stopThreeJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopThreeJoints, this, id1, id2, id3);
    return retval;
}

int CLinkbotLGroup::traceOff(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_traceOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, traceOff, this);
    return retval;
}

int CLinkbotLGroup::traceOn(void) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_traceOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, traceOn, this);
    return retval;
}

int CLinkbotLGroup::turnLeft(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotLGroup::turnLeftNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotLGroup::turnRight(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotLGroup::turnRightNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLLG_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, trackwidth);
    return retval;
}
