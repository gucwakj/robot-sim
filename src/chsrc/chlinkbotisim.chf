#include <robosim.h>
#include <linkbot.h>
#include <dlfcn.h>
#include <stdarg.h>
#include <array.h>

CLinkbotI::CLinkbotI() {
	if (RoboSim::_dlhandle == NULL || RoboSim::_dlcount == 0) {
		RoboSim::_dlhandle = dlopen("librobosim.dl", RTLD_LAZY);
		if (RoboSim::_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	void *fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_CLinkbotI_chdl");
	if (fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	RoboSim::_dlcount++;
}

CLinkbotI::~CLinkbotI() {
	void *fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_dCLinkbotI_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	RoboSim::_dlcount--;
	if (RoboSim::_dlcount <= 0 && RoboSim::_dlhandle != NULL) {
		if (dlclose(RoboSim::_dlhandle) != 0)
			printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
	}
}

int CLinkbotI::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}

int CLinkbotI::connect(...) {
	void *fptr;
	int retval;
	va_list ap;
	char *name;
	va_start(ap, VA_NOARG);

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_connect_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}

	if (va_count(ap) == 1) {
		name = va_arg(ap, char *);
		dlrunfun(fptr, &retval, NULL, this, name);
	}
	else {
		dlrunfun(fptr, &retval, NULL, this);
	}

	va_end(ap);
	return retval;
}

int CLinkbotI::delay(double milliseconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_delay_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, milliseconds);
    return retval;
}

int CLinkbotI::delaySeconds(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_delaySeconds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, seconds);
    return retval;
}

int CLinkbotI::disableRecordDataShift() {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_disableRecordDataShift_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this);
	return retval;
}

int CLinkbotI::disconnect() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, disconnect, this);
    return retval;
}

int CLinkbotI::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::enableRecordDataShift() {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_enableRecordDataShift_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this);
	return retval;
}

int CLinkbotI::getAccelerometerData(double &x, double &y, double &z) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getAccelerometerData_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y, &z);
    return retval;
}

int CLinkbotI::getBatteryVoltage(double &voltage) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getBatteryVoltage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &voltage);
    return retval;
}

int CLinkbotI::getColor(string_t &color) {
	return getLEDColor(color);
}

int CLinkbotI::getColorName(char color[]) {
	return getLEDColorName(color);
}

int CLinkbotI::getColorRGB(int &r, int &g, int &b) {
	return getLEDColorRGB(r, g, b);
}

int CLinkbotI::getLEDColor(string_t &color) {
	int retval;
	char color1[25];

	retval = getLEDColorName(color1);
	color = color1;
	return retval;
}

int CLinkbotI::getLEDColorName(char color[]) {
	void *fptr;
	int retval;

	fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getLEDColorName_chdl");
	if(fptr == NULL) {
		fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
		return -1;
	}
	dlrunfun(fptr, &retval, NULL, this, color);
	return retval;
}

int CLinkbotI::getLEDColorRGB(int &r, int &g, int &b) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getLEDColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &r, &g, &b);
    return retval;
}

int CLinkbotI::getDistance(double &distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &distance, radius);
    return retval;
}

int CLinkbotI::getFormFactor(int &formFactor) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getFormFactor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &formFactor);
    return retval;
}

int CLinkbotI::getID() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getID_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotI::getJointAngle(int id, double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}

int CLinkbotI::getJointAngleAverage(int id, double & angle, ...) {
    void *fptr;
    int retval;
    int numReadings;
    va_list ap;
    va_start(ap, angle);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointAngleAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, id, &angle, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, id, &angle);
    }
    va_end(ap);
    return retval;
}

int CLinkbotI::getJointAngles(double &angle1, double &angle2, double &angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    return retval;
}

int CLinkbotI::getJointAnglesAverage(double &angle1, double &angle2, double &angle3, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int numReadings;
    va_start(ap, angle3);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointAnglesAverage_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
      numReadings = va_arg(ap, int);
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3, numReadings);
    } else {
      dlrunfun(fptr, &retval, NULL, this, &angle1, &angle2, &angle3);
    }
    va_end(ap);
    return retval;
}

int CLinkbotI::getJointMaxSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointMaxSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CLinkbotI::getJointSafetyAngle(double & angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &angle);
    return retval;
}

int CLinkbotI::getJointSafetyAngleTimeout(double & seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &seconds);
    return retval;
}

int CLinkbotI::getJointSpeed(int id, double & speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int CLinkbotI::getJointSpeedRatio(int id, double & ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}

int CLinkbotI::getJointSpeeds(double &speed1, double &speed2, double &speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3);
    return retval;
}

int CLinkbotI::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3);
    return retval;
}

int CLinkbotI::getJointState(int id, int & state) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getJointState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &state);
    return retval;
}

int CLinkbotI::getxy(double &x, double &y) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_getxy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &x, &y);
    return retval;
}

int CLinkbotI::isConnected() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isConnected, this);
    return retval;
}

int CLinkbotI::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CLinkbotI::isNotMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_isNotMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isNotMoving, this);
    return retval;
}

int CLinkbotI::line(double x1, double y1, double z1, double x2, double y2, double z2, int linewidth, char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_line_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, line, this, x1, y1, z1, x2, y2, z2, linewidth, color);
    return retval;
}

int CLinkbotI::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistance, this, distance, radius);
    return retval;
}

int CLinkbotI::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}

int CLinkbotI::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CLinkbotI::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}

int CLinkbotI::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CLinkbotI::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}

int CLinkbotI::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CLinkbotI::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}

int CLinkbotI::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CLinkbotI::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}

int CLinkbotI::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}

int CLinkbotI::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CLinkbotI::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CLinkbotI::moveContinuousNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}

int CLinkbotI::moveContinuousTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotI::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}

int CLinkbotI::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}

int CLinkbotI::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}

int CLinkbotI::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}

int CLinkbotI::moveJoint(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJoint, this, id, angle);
    return retval;
}

int CLinkbotI::moveJointContinuousNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJointContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousNB, this, id, dir);
    return retval;
}

int CLinkbotI::moveJointContinuousTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJointContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointContinuousTime, this, id, dir, seconds);
    return retval;
}

int CLinkbotI::moveJointNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJointNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointNB, this, id, angle);
    return retval;
}

int CLinkbotI::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CLinkbotI::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotI::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotI::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CLinkbotI::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CLinkbotI::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotI::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}

int CLinkbotI::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CLinkbotI::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CLinkbotI::movexy(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_movexy_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexy, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_movexyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyNB, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyExpr(double x0, double xf, int n, char *expr, double radius, double trackwidth) {
	// number of steps necessary
	double step = (xf-x0)/(n-1);

	// movexy to sequence of (x,y) values
	int i = 0;
	for (i = 0; i < n; i++) {
		double x = x0 + i*step;
		double y = streval(expr);
		movexy(x, y, radius, trackwidth);
	}

	// success
	return 0;
}

int CLinkbotI::movexyExprNB(double x0, double xf, int n, char *expr, double radius, double trackwidth) {
	fprintf(_stderr, "Error: movexyExprNB() is not implemented.\n");

	// success
	return 0;
}

int CLinkbotI::movexyFunc(double x0, double xf, int n, double (*func)(double x), double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_movexyFunc_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyFunc, this, x0, xf, n, func, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyFuncNB(double x0, double xf, int n, double (*func)(double x), double radius, double trackwidth) {
	fprintf(_stderr, "Error: movexyFuncNB() is not implemented.\n");

	// success
	return 0;
}

int CLinkbotI::movexyPoly(double x0, double xf, int n, char *poly, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_movexyPoly_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyPoly, this, x0, xf, n, poly, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyPolyNB(double x0, double xf, int n, char *poly, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_movexyPolyNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyPolyNB, this, x0, xf, n, poly, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyTo(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_movexyTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyTo, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyToNB(double x, double y, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_movexyToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyToNB, this, x, y, radius, trackwidth);
    return retval;
}

int CLinkbotI::movexyWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_movexyWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, movexyWait, this);
    return retval;
}

int CLinkbotI::point(double x, double y, double z, int pointsize, char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_point_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, point, this, x, y, z, pointsize, color);
    return retval;
}

int CLinkbotI::recordAngle(int id, double time[:], double angle[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, recordAngle, this, id, time, angle, num, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotI::recordAngleBegin(int id, double* &time, double* &angle, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordAngleBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &angle, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotI::recordAngleEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordAngleEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CLinkbotI::recordAngles(double time[:], double angle1[:], double angle2[:], double angle3[:], int num, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordAngles_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, recordAngles, this, time, angle1, angle2, angle3, num, seconds);
    }
    return retval;
}

int CLinkbotI::recordAnglesBegin(double* &time, double* &angle1, double* &angle2, double* &angle3, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordAnglesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &angle1, &angle2, &angle3, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotI::recordAnglesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordAnglesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CLinkbotI::recordDistanceBegin(int id, double* &time, double* &distance, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    va_list ap;
    int shiftData = 1;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordDistanceBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds, shiftData);
    } else {
		dlrunfun(fptr, &retval, NULL, this, id, &time, &distance, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotI::recordDistanceEnd(int id, int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordDistanceEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &num);
    return retval;
}

int CLinkbotI::recordDistanceOffset(double distance) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordDistanceOffset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance);
    return retval;
}

int CLinkbotI::recordDistancesBegin(double* &time, double* &distance1, double* &distance2, double* &distance3, double radius, double seconds, ...) {
    void *fptr;
    int retval;
    int shiftData;
    va_list ap;
    va_start(ap, seconds);

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordDistancesBegin_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		shiftData = va_arg(ap, int);
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, radius, seconds, shiftData);
    }
	else {
		dlrunfun(fptr, &retval, NULL, this, &time, &distance1, &distance2, &distance3, radius, seconds);
    }
    va_end(ap);
    return retval;
}

int CLinkbotI::recordDistancesEnd(int &num) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordDistancesEnd_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &num);
    return retval;
}

int CLinkbotI::recordWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_recordWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, recordWait, this);
    return retval;
}

int CLinkbotI::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CLinkbotI::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}

int CLinkbotI::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CLinkbotI::setBuzzerFrequency(int frequency, double time) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setBuzzerFrequency_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequency, this, frequency, time);
    return retval;
}

int CLinkbotI::setBuzzerFrequencyOn(int frequency) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setBuzzerFrequencyOn_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOn, this, frequency);
    return retval;
}

int CLinkbotI::setBuzzerFrequencyOff() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setBuzzerFrequencyOff_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setBuzzerFrequencyOff, this);
    return retval;
}

int CLinkbotI::setColor(char *color) {
	return setLEDColor(color);
}

int CLinkbotI::setColorRGB(int r, int g, int b) {
	return setLEDColorRGB(r, g, b);
}

int CLinkbotI::setLEDColor(char *color) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setLEDColor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setLEDColor, this, color);
    return retval;
}

int CLinkbotI::setLEDColorRGB(int r, int g, int b) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setLEDColorRGB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setLEDColorRGB, this, r, g, b);
    return retval;
}

int CLinkbotI::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}

int CLinkbotI::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}

int CLinkbotI::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}

int CLinkbotI::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CLinkbotI::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CLinkbotI::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CLinkbotI::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CLinkbotI::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}

int CLinkbotI::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, ratio1, ratio2, ratio3);
    return retval;
}

int CLinkbotI::setMotorPower(int id, int power) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setMotorPower_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorPower, this, id, power);
    return retval;
}

int CLinkbotI::setMovementStateNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3);
    return retval;
}

int CLinkbotI::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotI::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotI::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}

int CLinkbotI::stop() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_stop_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CLinkbotI::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stop, this);
    return retval;
}

int CLinkbotI::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CLinkbotI::systemTime(double &systemTime) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_systemTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &systemTime);
    return retval;
}

int CLinkbotI::text(double x, double y, double z, char *text) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_text_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, x, y, z, text);
    return retval;
}

int CLinkbotI::turnLeft(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotI::turnLeftNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotI::turnRight(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotI::turnRightNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLinkbotI_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, trackwidth);
    return retval;
}

CLinkbotIGroup::CLinkbotIGroup() {
	if (RoboSim::_dlhandle == NULL || RoboSim::_dlcount == 0) {
		RoboSim::_dlhandle = dlopen("librobosim.dl", RTLD_LAZY);
		if (RoboSim::_dlhandle == NULL) {
			printf("Error: %s(): dlopen(): %s\n", __class_func__, dlerror());
			return;
		}
	}
	void *fptr = dlsym(RoboSim::_dlhandle, "CLIG_CLinkbotIGroup_chdl");
	if (fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL);
	RoboSim::_dlcount++;
}

CLinkbotIGroup::~CLinkbotIGroup() {
	void *fptr = dlsym(RoboSim::_dlhandle, "CLIG_dCLinkbotIGroup_chdl");
	if(fptr == NULL) {
		printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
		return;
	}
	dlrunfun(fptr, NULL, NULL, this);
	RoboSim::_dlcount--;
	if (RoboSim::_dlcount <= 0 && RoboSim::_dlhandle != NULL) {
		if (dlclose(RoboSim::_dlhandle) != 0)
			printf("Error: %s(): dlsym(): %s\n", __class_func__, dlerror());
	}
}

int CLinkbotIGroup::addRobot(CLinkbotI &robot) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_addRobot_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &robot);
    return retval;
}

int CLinkbotIGroup::addRobots(array CLinkbotI robots[], ...) {
    void *fptr;
    int retval;
    int numRobots;
    va_list ap;
    va_start(ap, robots);

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_addRobots_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    if(va_count(ap) == 1) {
		numRobots = va_arg(ap, int);
    } else {
		numRobots = (int)shape(robots);
    }
    dlrunfun(fptr, &retval, NULL, this, robots, numRobots);
    va_end(ap);
    return retval;
}

int CLinkbotIGroup::blinkLED(double delay, int numBlinks) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_blinkLED_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, delay, numBlinks);
    return retval;
}

int CLinkbotIGroup::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this);
    return retval;
}

int CLinkbotIGroup::driveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_driveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotIGroup::driveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_driveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotIGroup::driveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_driveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::driveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_driveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::driveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_driveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::driveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_driveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, driveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMoving, this);
    return retval;
}

int CLinkbotIGroup::isNotMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_isNotMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isNotMoving, this);
    return retval;
}

int CLinkbotIGroup::motionDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, distance, radius);
    return retval;
}

int CLinkbotIGroup::motionDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionDistanceNB, this, distance, radius);
    return retval;
}

int CLinkbotIGroup::motionRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackward, this, angle);
    return retval;
}

int CLinkbotIGroup::motionRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollBackwardNB, this, angle);
    return retval;
}

int CLinkbotIGroup::motionRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForward, this, angle);
    return retval;
}

int CLinkbotIGroup::motionRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionRollForwardNB, this, angle);
    return retval;
}

int CLinkbotIGroup::motionTurnLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionTurnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeft, this, angle);
    return retval;
}

int CLinkbotIGroup::motionTurnLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionTurnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnLeftNB, this, angle);
    return retval;
}

int CLinkbotIGroup::motionTurnRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionTurnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRight, this, angle);
    return retval;
}

int CLinkbotIGroup::motionTurnRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionTurnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionTurnRightNB, this, angle);
    return retval;
}

int CLinkbotIGroup::motionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_motionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, motionWait, this);
    return retval;
}

int CLinkbotIGroup::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::moveBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackward, this, angle);
    return retval;
}

int CLinkbotIGroup::moveBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveBackwardNB, this, angle);
    return retval;
}

int CLinkbotIGroup::moveContinuousNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}

int CLinkbotIGroup::moveContinuousTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotIGroup::moveDistance(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveDistance_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistance, this, distance, radius);
    return retval;
}

int CLinkbotIGroup::moveDistanceNB(double distance, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveDistanceNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveDistanceNB, this, distance, radius);
    return retval;
}

int CLinkbotIGroup::moveForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForward, this, angle);
    return retval;
}

int CLinkbotIGroup::moveForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveForwardNB, this, angle);
    return retval;
}

int CLinkbotIGroup::moveJointTo(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveJointTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointTo, this, id, angle);
    return retval;
}

int CLinkbotIGroup::moveJointToDirect(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveJointToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirect, this, id, angle);
    return retval;
}

int CLinkbotIGroup::moveJointToNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveJointToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToNB, this, id, angle);
    return retval;
}

int CLinkbotIGroup::moveJointToDirectNB(int id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveJointToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointToDirectNB, this, id, angle);
    return retval;
}

int CLinkbotIGroup::moveJointWait(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveJointWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveJointWait, this, id);
    return retval;
}

int CLinkbotIGroup::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::moveToDirect(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveToDirect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirect, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::moveToDirectNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveToDirectNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToDirectNB, this, angle1, angle2, angle3);
    return retval;
}

int CLinkbotIGroup::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZero, this);
    return retval;
}

int CLinkbotIGroup::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToZeroNB, this);
    return retval;
}

int CLinkbotIGroup::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveWait, this);
    return retval;
}

int CLinkbotIGroup::reset() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_reset_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, reset, this);
    return retval;
}

int CLinkbotIGroup::resetToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_resetToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZero, this);
    return retval;
}

int CLinkbotIGroup::resetToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_resetToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, resetToZeroNB, this);
    return retval;
}

int CLinkbotIGroup::setExitState(int exitState) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setExitState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setExitState, this, exitState);
    return retval;
}

int CLinkbotIGroup::setJointMovementStateNB(int id, int dir) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setJointMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateNB, this, id, dir);
    return retval;
}

int CLinkbotIGroup::setJointMovementStateTime(int id, int dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setJointMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointMovementStateTime, this, id, dir, seconds);
    return retval;
}

int CLinkbotIGroup::setJointSafetyAngle(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setJointSafetyAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngle, this, angle);
    return retval;
}

int CLinkbotIGroup::setJointSafetyAngleTimeout(double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setJointSafetyAngleTimeout_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSafetyAngleTimeout, this, seconds);
    return retval;
}

int CLinkbotIGroup::setJointSpeed(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setJointSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeed, this, id, speed);
    return retval;
}

int CLinkbotIGroup::setJointSpeeds(double speed1, double speed2, double speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setJointSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeeds, this, speed1, speed2, speed3);
    return retval;
}

int CLinkbotIGroup::setJointSpeedRatio(int id, double speed) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setJointSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatio, this, id, speed);
    return retval;
}

int CLinkbotIGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setJointSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setJointSpeedRatios, this, ratio1, ratio2, ratio3);
    return retval;
}

int CLinkbotIGroup::setMovementStateNB(int dir1, int dir2, int dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setMovementStateNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateNB, this, dir1, dir2, dir3);
    return retval;
}

int CLinkbotIGroup::setMovementStateTime(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setMovementStateTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTime, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotIGroup::setMovementStateTimeNB(int dir1, int dir2, int dir3, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setMovementStateTimeNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMovementStateTimeNB, this, dir1, dir2, dir3, seconds);
    return retval;
}

int CLinkbotIGroup::setTwoWheelRobotSpeed(double speed, double radius) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}

int CLinkbotIGroup::stopAllJoints() {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_stopAllJoints_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopAllJoints, this);
    return retval;
}

int CLinkbotIGroup::stopOneJoint(int id) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_stopOneJoint_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneJoint, this, id);
    return retval;
}

int CLinkbotIGroup::turnLeft(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_turnLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeft, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotIGroup::turnLeftNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_turnLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnLeftNB, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotIGroup::turnRight(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_turnRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRight, this, angle, radius, trackwidth);
    return retval;
}

int CLinkbotIGroup::turnRightNB(double angle, double radius, double trackwidth) {
    void *fptr;
    int retval;

    fptr = dlsym(RoboSim::_dlhandle, "CLIG_turnRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, turnRightNB, this, angle, radius, trackwidth);
    return retval;
}
